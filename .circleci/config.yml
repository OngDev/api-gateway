# Javascript Node CircleCI 2.0 configuration file fg
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/mongo:4.2.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: npm run eslint:unix
      - run: npm run test
      - run: npm run coverage
      - restore-cache:
            key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }} 
      - run: npm run build
      - save-cache:
          key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ./dist
  deploy-to-int:
    environment:
      IMAGE_NAME: ongdev/building-on-ci-to-int
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/mongo:4.2.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache:
          key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: ls ~/repo/dist
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d 
      - run:
          name: login docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: build images
          command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: push image to docker hub  
          command: docker push $IMAGE_NAME:latest
  deploy-to-master:
    environment:
      IMAGE_NAME: ongdev/building-on-ci-to-master
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/mongo:4.2.1
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache:
          key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: ls ~/repo/dist
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d 
      - run:
          name: login docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: build images
          command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: push image to docker hub  
          command: docker push $IMAGE_NAME:latest
workflows:
  version: 2
  build_n_deploy:
    jobs:
      - build
      - deploy-to-int:
          requires:
            - build
          filters:
            branches:
              only: integration
      - deploy-to-master:
          requires:
            - build
          filters:
            branches:
              only: master
      
